Git:

Initialize Git:	        git init
Add all files:	        git add .
Commit changes:	        git commit -m "Message"
Connect to repo:	    git remote add origin https://github.com/Equalle/TimeMAtricks.git
Push files:	            git push -u origin main

git checkout


VSCode::

SendOSC                 Ctrl + Shift + P Enter
                        Ctrl + Alt + S


Shell:

USB S/N:                wmic diskdrive get model,serialnumber

S/N shit:

MA-Tools key:           A09105B9D5543E8D584BA11F7D61BED8F6792291FC7FDAD5CA4FBA1F160A8749a=9?


DeleteGlobalVariable "TM_MasterValue"
DeleteGlobalVariable "TM_TimingMaster"
DeleteGlobalVariable "TM_SpeedMaster"
DeleteGlobalVariable "TM_Matricks1Value"
DeleteGlobalVariable "TM_Matricks2Value"
DeleteGlobalVariable "TM_Matricks3Value"
DeleteGlobalVariable "TM_Matricks1Rate"
DeleteGlobalVariable "TM_Matricks2Rate"
DeleteGlobalVariable "TM_Matricks3Rate"
DeleteGlobalVariable "TM_Matricks1Button"
DeleteGlobalVariable "TM_Matricks2Button"
DeleteGlobalVariable "TM_Matricks3Button"
DeleteGlobalVariable "TM_MatricksPrefixValue"
DeleteGlobalVariable "TM_MatricksPrefixButton"
DeleteGlobalVariable "TM_MatricksStartIndex"
DeleteGlobalVariable "TM_RefreshRateValue"
DeleteGlobalVariable "TM_FadeValue"
DeleteGlobalVariable "TM_FadeToggle"
DeleteGlobalVariable "TM_FadeLessText"
DeleteGlobalVariable "TM_FadeLessFont"
DeleteGlobalVariable "TM_FadeMoreText"
DeleteGlobalVariable "TM_FadeMoreFont"
--

local function get_usb_drive()
  local removableDrives = {}
  for _, v in ipairs(Root().Temp.DriveCollect) do
    local driveType = v:Get("DRIVETYPE")
    if driveType == "Removeable" then
      table.insert(removableDrives, {
        Path = v.Path,
        Name = v.Name
      })
    end
  end
  return removableDrives
end

local function get_serial_number()
  local drives = {}

  -- Detect OS
  local isWindows = package.config:sub(1, 1) == '\\'

  if isWindows then
    -- Windows: Get all logical drives with their properties
    local f = io.popen("wmic logicaldisk get DeviceID,VolumeName,DriveType,Size /format:list 2>nul")
    if f then
      local result = f:read("*a")
      f:close()

      if result then
        local currentDrive = {}
        for line in result:gmatch("[^\r\n]+") do
          line = line:match("^%s*(.-)%s*$") -- trim whitespace
          if line:match("%S") then
            local key, value = line:match("^(.-)=(.*)$")
            if key and value then
              key = key:match("^%s*(.-)%s*$")
              value = value:match("^%s*(.-)%s*$")

              if key == "DeviceID" then
                currentDrive.DriveLetter = value
              elseif key == "VolumeName" then
                currentDrive.VolumeName = value
              elseif key == "DriveType" then
                currentDrive.DriveType = value
              elseif key == "Size" then
                currentDrive.Size = value
              end
            end
          else
            -- Empty line signals end of drive entry
            if currentDrive.DriveLetter then
              -- Get serial number for this drive letter
              local snCmd = string.format('wmic path Win32_LogicalDisk where "DeviceID=\'%s\'" get VolumeSerialNumber /format:list 2>nul', currentDrive.DriveLetter)
              local snf = io.popen(snCmd)
              if snf then
                local snResult = snf:read("*a")
                snf:close()
                currentDrive.SerialNumber = snResult:match("VolumeSerialNumber=([^\r\n]+)") or ""
                currentDrive.SerialNumber = currentDrive.SerialNumber:match("^%s*(.-)%s*$")
              end

              -- Get model/description
              local modelCmd = string.format('wmic path Win32_LogicalDisk where "DeviceID=\'%s\'" get Description /format:list 2>nul', currentDrive.DriveLetter)
              local mf = io.popen(modelCmd)
              if mf then
                local modelResult = mf:read("*a")
                mf:close()
                currentDrive.Model = modelResult:match("Description=([^\r\n]+)") or ""
                currentDrive.Model = currentDrive.Model:match("^%s*(.-)%s*$")
              end

              currentDrive.MountPoint = currentDrive.DriveLetter
              -- Insert a copy of currentDrive to preserve it
              local driveCopy = {}
              for k, v in pairs(currentDrive) do
                driveCopy[k] = v
              end
              table.insert(drives, driveCopy)
            end
            currentDrive = {} -- Reset for next drive
          end
        end

        -- Process last drive if exists (end of file without empty line)
        if next(currentDrive) ~= nil and currentDrive.DriveLetter then
          local snCmd = string.format('wmic path Win32_LogicalDisk where "DeviceID=\'%s\'" get VolumeSerialNumber /format:list 2>nul', currentDrive.DriveLetter)
          local snf = io.popen(snCmd)
          if snf then
            local snResult = snf:read("*a")
            snf:close()
            currentDrive.SerialNumber = snResult:match("VolumeSerialNumber=([^\r\n]+)") or ""
            currentDrive.SerialNumber = currentDrive.SerialNumber:match("^%s*(.-)%s*$")
          end

          local modelCmd = string.format('wmic path Win32_LogicalDisk where "DeviceID=\'%s\'" get Description /format:list 2>nul', currentDrive.DriveLetter)
          local mf = io.popen(modelCmd)
          if mf then
            local modelResult = mf:read("*a")
            mf:close()
            currentDrive.Model = modelResult:match("Description=([^\r\n]+)") or ""
            currentDrive.Model = currentDrive.Model:match("^%s*(.-)%s*$")
          end

          currentDrive.MountPoint = currentDrive.DriveLetter
          table.insert(drives, currentDrive)
        end
        
      end
    end
  else
    -- macOS/Linux: use diskutil (macOS) or lsblk (Linux)
    local f = io.popen("diskutil list 2>/dev/null || lsblk -o NAME,MODEL,SERIAL,MOUNTPOINT -P")
    if f then
      local result = f:read("*a")
      f:close()

      if result then
        -- Try macOS diskutil format first
        if result:match("/dev/disk") then
          for disk in result:gmatch("/dev/(disk%d+)") do
            local info = io.popen("diskutil info " .. disk .. " 2>/dev/null")
            if info then
              local diskInfo = info:read("*a")
              info:close()

              local drive = { DeviceID = "/dev/" .. disk }
              drive.Model = diskInfo:match("Device / Media Name:%s*(.-)%s*\n") or ""
              drive.SerialNumber = diskInfo:match("Disk / Partition UUID:%s*(.-)%s*\n") or ""
              drive.MountPoint = diskInfo:match("Mount Point:%s*(.-)%s*\n") or ""
              drive.DriveLetter = drive.MountPoint

              table.insert(drives, drive)
            end
          end
        else
          -- Linux lsblk format
          for line in result:gmatch("[^\n]+") do
            local name = line:match('NAME="([^"]*)"')
            local model = line:match('MODEL="([^"]*)"')
            local serial = line:match('SERIAL="([^"]*)"')
            local mount = line:match('MOUNTPOINT="([^"]*)"')

            if name then
              table.insert(drives, {
                DeviceID = "/dev/" .. name,
                Model = model or "",
                SerialNumber = serial or "",
                MountPoint = mount or "",
                DriveLetter = mount or ""
              })
            end
          end
        end
      end
    end
  end
  
  return drives
end